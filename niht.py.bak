#!/usr/bin/python3
# encoding: utf-8
import psutil,sys,datetime,re

class Collector:
    next

class ProcessCollector(Collector):
    def __init__(self,pinfo):
        self.pinfo=pinfo
    def getPinfo(self):
        print(self.pinfo)

class NetinfoProcessCollector(ProcessCollector):
    __state_pids=list()
    __state_net_listen_list=[]
    __state_net_established_list=[]

    def __getPids(self):
        pname=self.pinfo['pname']
        pids=[]
        for proc in psutil.process_iter():
            pinfo = proc.as_dict(attrs=['pid', 'name','cmdline'])
            if (pname in str(pinfo['cmdline'])):
                if ('grep' not in str(pinfo['cmdline'])):
                    pids.append(pinfo['pid'])
        self.__state_pids=pids

    def __get_net_listen_list_by_pid(self):
        self.__getPids()
        for pid in self.__state_pids:
            p=psutil.Process(pid)
            print(p.cmdline())
            log_list=[]
    #        for i in p.open_files():
    #            i=list(i)
    #            if(re.search('var/log',i[0])): log_list.append(i[0])
        
            listen_list=[]
    #        est_list=[]
            for i in p.connections():
                i=list(i)
                if(i[5]=="LISTEN"): listen_list.append(i)
                #if(i[5]=="ESTABLISHED"): est_list.append(i)
        self.__state_net_listen_list={"listen_list":listen_list}
        self.__state_net_listen_list={"listen_list":'abc'}
        #return({"log_list":log_list,"listen_list":listen_list,"est_list":est_list})

    def __get_net_established_list_by_pid(self):
        self.__getPids()
        for pid in self.__state_pids:
            p=psutil.Process(pid)
            print(p.cmdline())
            log_list=[]
    #        for i in p.open_files():
    #            i=list(i)
    #            if(re.search('var/log',i[0])): log_list.append(i[0])
        
    #        listen_list=[]
            est_list=[]
            for i in p.connections():
                i=list(i)
                #if(i[5]=="LISTEN"): listen_list.append(i)
                if(i[5]=="ESTABLISHED"): est_list.append(i)
        self.__state_net_established_list={"established_list":listen_list}

    def printself(self):
        self.__get_net_listen_list_by_pid()
        self.__get_net_listen_list_by_pid()
        print(self.__state_net_listen_list)

if __name__ == "__main__":
    pinfo={ "pname" : "gorouter" }
    henry=NetinfoProcessCollector(pinfo)
    henry.printself()


#
#def get_process_info(pid):
#    print("-----------------------")
#    p=psutil.Process(pid)
#    '''
#    print(p.pid)
#    print(p.parent())
#    print(p.username())
#    print(p.status())
#    print(datetime.datetime.fromtimestamp(p.create_time()).strftime("%Y-%m-%d %H:%M:%S"))
#    print(p.uids())
#    print(p.gids())
#    print(p.cpu_times())
#    print(p.memory_percent())
#    print(p.memory_info())
#    print(p.io_counters())
#    print(p.num_threads())
#    '''
#
#    
#    print(p.cwd())
#    print(p.exe())
#    print(p.cmdline())
#    log_list=[]
#    for i in p.open_files():
#        i=list(i)
#        if(re.search('var/log',i[0])): log_list.append(i[0])
#
#    listen_list=[]
#    est_list=[]
#    for i in p.connections():
#        i=list(i)
#        if(i[5]=="LISTEN"): listen_list.append(i)
#        if(i[5]=="ESTABLISHED"): est_list.append(i)
#
#    return({"log_list":log_list,"listen_list":listen_list,"est_list":est_list})
#    
#    
#
#jpids=[]
#if len(sys.argv) == 2:
#    pid=int(sys.argv[1])
#    jpids=[pid]
#else: 
#    jpids=get_java_process()
#
#for pid in jpids:
#    data=get_process_info(pid)
#    for i in data["listen_list"]: print(i[3])
#    for i in data["est_list"]: print(i[3],i[4])
